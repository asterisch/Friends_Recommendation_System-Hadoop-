/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package Mapred;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import org.apache.hadoop.io.*;import org.apache.hadoop.mapred.MapReduceBase;import org.apache.hadoop.mapred.OutputCollector;import org.apache.hadoop.mapred.Reducer;import org.apache.hadoop.mapred.Reporter;import org.apache.log4j.Logger;import relations.Friend_Tuple;/** * * @author terry */public class Reduce extends MapReduceBase implements Reducer<Text,Text,Text,Text> {    public static Logger log=Logger.getLogger(Reduce.class);    private final int common_friends_limit =3;    @Override    public void reduce(Text user, Iterator<Text> twolist, OutputCollector<Text, Text> output, Reporter rprtr) throws IOException     {        HashMap<String,String> rec=new HashMap<>();        HashSet<String> suggest= new HashSet<>();        while(twolist.hasNext())        {            Text temp1 = twolist.next();            String temp=temp1.toString();            String fromUser = temp.split(" -> ")[1].trim();            String fromUser_friends = temp.split(" -> ")[0];                       if (fromUser.length()>1) rec.put(fromUser,fromUser_friends);        }        log.info(user.toString()+"->"+Arrays.deepToString(rec.keySet().toArray()));        for(String from : rec.keySet())        {                        if(!from.trim().equals(user.toString().trim()))            {                ArrayList<String> commons=new ArrayList<>();                String from_friends[] = rec.get(from).split(" ");                String user_friends = rec.get(user.toString().trim());                for(String friend:from_friends)                {                    if(user_friends.contains(friend.trim()))                    {                        commons.add(friend.trim());                    }                }                if(commons.size()>=common_friends_limit)                {                    for(String friend:from_friends)                    {                        if(!commons.contains(friend.trim()) && !friend.trim().equals(user.toString().trim()))                        {                            suggest.add(friend.trim());                        }                    }                                    }            }        }        if(!suggest.isEmpty())        {            StringBuffer sb = new StringBuffer();            for(String sug:suggest)            {                sb.append(sug).append(" ");            }            output.collect(new Text(user), new Text(sb.toString()) );        }    }    }