/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package Mapred;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import org.apache.hadoop.io.*;import org.apache.hadoop.mapred.MapReduceBase;import org.apache.hadoop.mapred.OutputCollector;import org.apache.hadoop.mapred.Reducer;import org.apache.hadoop.mapred.Reporter;import org.apache.log4j.Logger;import relations.Friend_Tuple;/** * * @author terry */public class Reduce extends MapReduceBase implements Reducer<Text, Friend_Tuple, Text, Text> {    public static Logger log = Logger.getLogger(Reduce.class);    private final int common_friends_limit = 3;    @Override    public void reduce(Text toUser, Iterator<Friend_Tuple> fr_friendof_fr, OutputCollector<Text, Text> output, Reporter rprtr) throws IOException {        HashMap<String, Integer> users_friends = new HashMap<>();        ArrayList<String> toUser_friends = new ArrayList<>();        while (fr_friendof_fr.hasNext())         {            Friend_Tuple user_friend = fr_friendof_fr.next();                                            if (user_friend.getFriend().equals("null"))             {                toUser_friends.add(user_friend.getUser());                //log.info(user_friend.getUser());            }             else             {                if (users_friends.containsKey(user_friend.getUser()))                 {                    int temp = users_friends.get(user_friend.getUser());                    users_friends.put(user_friend.getUser(), ++temp);                }                 else                 {                    users_friends.put(user_friend.getUser(),1);                }            }        }        StringBuilder suggests=new StringBuilder();        for(String user:users_friends.keySet())        {          //  log.info(user+" commons: "+users_friends.get(user));            if(users_friends.get(user)>=common_friends_limit)            {                if(!toUser_friends.contains(user) && !suggests.toString().contains(user))                {                    suggests.append(user).append(" ");                }            }        }        output.collect(new Text(toUser), new Text(suggests.toString()));            }}